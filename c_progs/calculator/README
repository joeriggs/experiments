
This is a C implementation of a math calculator.  The calculator provides a
simple interactive text user interface.  The idea is that you can use it as-is
or build a more sophisticated user interface that sits on top of it.

Tested on the following platforms:
  CentOS 5.6 (32-bit) - gcc version 4.1.2
  CentOS 6.6 (32-bit) - gcc version 4.4.7
  CentOS 7.1 (64-bit) - gcc version 4.8.3


The class heirarchy looks like this:

   -----------------------------------------------------------------------
  |                                 main()                                |
   -----------------------------------------------------------------------
   -------------  --------------------------------------------------------
  |  raw_stdin  ||                       calculator                       |
   -------------  --------------------------------------------------------
                  ------------  ------------  ------------  ------------
                 |    list    ||   operand  ||  operator  ||    stack   |
                  ------------  ------------  ------------  ------------
                                ------   ---
                               |fp_exp| | b |
                                ------  | c |
                                --------  d |
                               |     bcd    |
                                ------------

  * main() provides the text-based user interface.  If you want to replace the
    text-based user interface with something more sophisticated, then you will
    want to replace main() with your own main().

  * raw_stdin provides an interface between main() and the console device,
    allowing the user to have a better interactive interface.  If you want to
    replace the text-based user interface with something more sophisticated,
    then you can remove this class.

  * calculator is the engine.  It parses the user input and drives all
    calculator operation.

    * list is a doubly-linked list.  It is used to store the user-input infix
       equation and is also used to store the internally-generated postfix
       equation while it is being created and prior to being executed.

    * operand is used to store each operand.  It contains members that know how
      to manipulate the numeric operands.

      * fp_exp is used to perform exponent operations when the exponent is a
        floating point number or a negative number.  All integer exponent
        operations are handled by the operand class.

      * bcd provides a binary coded decimal (bcd) data representation that
        allows the calculator to do decimal math without running into problems
        caused by IEEE 754 float or double issues.

    * operator is used to store each operator.  It contains members that know
      how to execute the steps necessary to perform the operator.

    * stack is used during the step that converts the user-input infix equation
      to postfix, and while processing the postfix equation.

